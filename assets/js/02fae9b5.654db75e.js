"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[395],{1198:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"type":"mdx","permalink":"/flux/","source":"@site/pages/index.md","title":"\u2699\ufe0f Flux - A Minimal State Machine Library","description":"Flux is a lightweight and type-safe finite state machine.","frontMatter":{},"unlisted":false}');var a=t(4848),s=t(8453);const r={},l="\u2699\ufe0f Flux - A Minimal State Machine Library",c={},d=[{value:"\ud83d\udce6 Features",id:"-features",level:2},{value:"\ud83d\udd27 API",id:"-api",level:2},{value:"<code>flux.unit(initialState: string) -&gt; unit</code>",id:"fluxunitinitialstate-string---unit",level:3},{value:"<code>unit:addState(name: string, onEnter: () -&gt; ()?, onExit: () -&gt; ()?) -&gt; ()</code>",id:"unitaddstatename-string-onenter-----onexit-------",level:3},{value:"<code>unit:changeState(newState: string) -&gt; ()</code>",id:"unitchangestatenewstate-string---",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"\ufe0f-flux---a-minimal-state-machine-library",children:"\u2699\ufe0f Flux - A Minimal State Machine Library"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Flux"})," is a lightweight and type-safe finite state machine."]}),"\n",(0,a.jsx)(n.h2,{id:"-features",children:"\ud83d\udce6 Features"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83d\udd01 ",(0,a.jsx)(n.strong,{children:"Declarative states"})," with ",(0,a.jsx)(n.code,{children:"onEnter"})," and ",(0,a.jsx)(n.code,{children:"onExit"})," callbacks"]}),"\n",(0,a.jsxs)(n.li,{children:["\u26a1 ",(0,a.jsx)(n.strong,{children:"Instant transitions"})," with idempotent logic"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83e\udde0 ",(0,a.jsx)(n.strong,{children:"Type-safe API"})]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,a.jsx)(n.strong,{children:"Lifecycle support"}),", including middleware for enter/exit events"]}),"\n",(0,a.jsx)(n.li,{children:"\ud83d\udd12 Simple to test, extend, and debug"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-api",children:"\ud83d\udd27 API"}),"\n",(0,a.jsx)(n.h3,{id:"fluxunitinitialstate-string---unit",children:(0,a.jsx)(n.code,{children:"flux.unit(initialState: string) -> unit"})}),"\n",(0,a.jsxs)(n.p,{children:["Creates a new state machine instance, initialized to the given ",(0,a.jsx)(n.code,{children:"initialState"}),". This instance can then have states added and transitioned between."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local machine = flux.unit("Idle")\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"unitaddstatename-string-onenter-----onexit-------",children:(0,a.jsx)(n.code,{children:"unit:addState(name: string, onEnter: () -> ()?, onExit: () -> ()?) -> ()"})}),"\n",(0,a.jsxs)(n.p,{children:["Adds a named state to the state machine. Both ",(0,a.jsx)(n.code,{children:"onEnter"})," and ",(0,a.jsx)(n.code,{children:"onExit"})," are optional lifecycle callbacks that run when transitioning ",(0,a.jsx)(n.strong,{children:"to"})," or ",(0,a.jsx)(n.strong,{children:"from"})," the state."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'machine:addState("Idle",\n\tfunction()\n\t\tprint("Entering Idle")\n\tend,\n\tfunction()\n\t\tprint("Exiting Idle")\n\tend\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:"or"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'machine:addState({\n\t\tname = "Idle",\n\t\tonEnter = function()\n\t\t\tprint("Entering Idle")\n\t\tend,\n\t\tonExit = function()\n\t\t\tprint("Exiting Idle")\n\t\tend,\n\t})\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"unitchangestatenewstate-string---",children:(0,a.jsx)(n.code,{children:"unit:changeState(newState: string) -> ()"})}),"\n",(0,a.jsxs)(n.p,{children:["Changes the current state to ",(0,a.jsx)(n.code,{children:"newState"}),". If the new state is the same as the current one, nothing happens (idempotent behavior).\nThis method automatically calls the ",(0,a.jsx)(n.code,{children:"onExit"})," function of the current state (if defined) and then ",(0,a.jsx)(n.code,{children:"onEnter"})," of the new state."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'machine:changeState("Idle")\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);